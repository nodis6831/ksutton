###
# EXERCISE 10.12

	Prove that the recursive version of the exp() method in Section 10.8
	on page 315 runs in theta(lg n) time. Let T(n) be the run time for
	n > 0, and explain why T(n) = c + T(n/2) for some constant c > 0, and
	then forumulate an argument similar to that for Forumula 10.2 on page 314.
	
	> exp method from Section 10.8:
	
		double exp(double x, int n) {
			double factor = (n%2 == 0  1.0 : x); 	// 1 if x is even; else x;
			if (n < 2) return factor;				// base
			return factor*exp(x*x, n/2);			// recursion
		}
		
		
	###
	# ANSWER
	
		To prove that the exp() method runs in theta(log n) time, we prove by
		induction.
		
		Base case:
		
			Let n = 1. Then T(n) = c + T(n/2) = c + T(1/2) for some constant c.
			
		Induction:
		
			Now we consider the case of n+1. So, T(n+1) = c + T((n+1)/2).
			Each time the exp() method is called, it recursively calls itself.
			This recursive call takes c + T(n/2) time for some constant c until
			n < 2. So, for n very large, the exp() method will call itself t number
			of times, while t is logarithmically proportional to n because each
			recursive call takes 1/2 the amount of time as the previous call before it.
			
			Not exactly a proof by induction, we know, but we're on the right track.
			
			For the answer to the second half of the question, see p. 314 because, as
			far as we can tell, the answer is exactly the same as what they have written down.
			And we don't like extra work =(.
		