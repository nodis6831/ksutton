###
# EXERCISE 10.5

	The Towers of Hanoi program performs seven disk moves for three disks. How many disk moves moves are performed for...
	
		a. 4 disks?
		
			2^4 - 1 = 15 moves
		
		b. 5 disks?
		
			2^5 - 1 = 31 moves
		
		c. n disks?
		
			2^n - 1
			
			Base case:
				First, let us assume that that f(n) = 2^n - 1 yields the total number of moves required
				to solve the Towers of Hanoi problem for n disks. If n = 1, then 2^1 - 1 = f(1) = 1. It
				only takes one move to solve the problem for one disk.
				
			Inductive step:
				Now, we prove that f(n) = 2^(n) - 1 yields the proper solution for f(n+1). So, we compute 
				2^(n+1) - 1 = f(n+1). So f(n+1) = f(n) + 1 + f(n) = 2^n - 1 + 1 + 2^n - 1. This simplifies
				to 2(2^n)-1 = 2^(n+1) - 1. Therefore f(n) is true for all positive integers n. 
				
				
#
###

###
# EXERCISE 10.6

	How many recursive calls would the call f(8) generate in the Fibonacci program in Listing 10.3 on page 304?
	
	
	###
	# ANSWER

		After working it out on paper:
		
		40 calls
		
		also see our little test program in Fibonacci.java
		
	#
	###

#
###